local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Services = {
    Players = game:GetService("Players"),
    RunService = game:GetService("RunService"),
    ReplicatedStorage = game:GetService("ReplicatedStorage"),
    Workspace = game:GetService("Workspace"),
    VirtualInputManager = game:GetService("VirtualInputManager"),
    TeleportService = game:GetService("TeleportService"),
    HttpService = game:GetService("HttpService"),
    TweenService = game:GetService("TweenService"),
    CollectionService = game:GetService("CollectionService"),
    CoreGui = game:GetService("CoreGui")
}

local player = Services.Players.LocalPlayer
local mouse = player:GetMouse()
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:FindFirstChild("Humanoid") or character:WaitForChild("Humanoid")
local humanoidrootpart = character:FindFirstChild("HumanoidRootPart") or character:WaitForChild("HumanoidRootPart")

local Debris_Variables = {
    Function_Variables = {
        getAllFromCollection = { taggedInstances = nil },
        GetBallInPlayer = { FootBall = nil },
        triggerQ = { Distance = nil },
        createBillboard = { BillboardGui = nil },
        createBarGui = { gui = nil, frame = nil },
        createBar = { BackgroundFrame = nil, FillFrame = nil },
        onCharacterAdded = {
            HumanoidRootPart = nil, styleGui = nil, styleTxt = nil, awakeGui = nil, awakeFrame = nil,
            flowGui = nil, flowFrame = nil, stamGui = nil, stamFrame = nil, awkBar = nil,
            flowBar = nil, stmBar = nil, Distance = nil, PlayerStats = nil
        },
        createESP = { espData = nil },
        warpBallToGoal = { ball = nil }
    },
    Modules = {},
    ESP_Features = {
        espEnabled = false,
        espFeatures = { Style = false, Awakening = false, Flow = false, Stamina = false },
        espObjects = {}
    },
    WalkSpeedToggle = { WalkSpeedConnect = nil },
	JumpPowerToggle = { JumpPowerConnect = nil },

    HitboxToggle = { FootBall = nil, HitBox = nil, Char = nil },
    HitboxKeybind = { State = false },
    AutoDribble = { tracked = {}, TargetPlayer = nil, Distance = nil, Sliding = nil, isSliding = false },
    vipToggle = { hasVIP = false },
    Raycast = {
        ball = nil, lastPosition = nil, GRAVITY = Services.Workspace.Gravity, TIME_STEP = 0.1,
        MAX_TIME = 3, VELOCITY_THRESHOLD = 1, MOVEMENT_THRESHOLD = 1, rayPart = nil, tween = nil
    },
    AutoGKKeybind = { State = false, ball = nil, Distance = nil },
    AutoTeamToggle = { selectedValue = nil, team = nil, position = nil },
    KaiserKeybide = { State = false },
    CurveShotProMaxKeybind = { State = false },
    NoCooldownStealToggle = { newSteal = nil },
    NoCooldownAirDribbleToggle = {},
    NoCooldownAirDashToggle = {}
}

local Window = Rayfield:CreateWindow({
   Name = "Noob Hub",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Noob hub",
   LoadingSubtitle = "nice script fr",
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Key System",
      Subtitle = "Key System of Noob hub",
      Note = "Key is: NoobHub1234", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"NoobHub1234"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

-- T·∫°o c√°c tab
local LegitTab = Window:CreateTab("Legit")
local VisualTab = Window:CreateTab("üëÅÔ∏èVisual")
local OPTab = Window:CreateTab("‚öîÔ∏èOP")
local StyleTab = Window:CreateTab("‚ú®Style")

-- Khai b√°o c√°c h√†m ph·ª• tr·ª£
local Function_Storage = {}

Function_Storage.getAllFromCollection = function(tagName)
    Debris_Variables.Function_Variables.getAllFromCollection.taggedInstances = Services.CollectionService:GetTagged(tagName)
    return Debris_Variables.Function_Variables.getAllFromCollection.taggedInstances
end

Function_Storage.GetBall = function()
    for _, obj in pairs(Function_Storage.getAllFromCollection("Football")) do
        if obj.Name == "Football" and obj.Parent ~= Services.ReplicatedStorage.Assets then
            return obj
        end
    end
end

Function_Storage.UpdateHitboxSize = function(TargetHitbox, Transparency, HitboxSize)
    TargetHitbox.Material = Enum.Material.ForceField
    TargetHitbox.BrickColor = BrickColor.new("Neon orange")
    TargetHitbox.Transparency = Transparency
    TargetHitbox.Size = Vector3.new(HitboxSize, HitboxSize, HitboxSize)
end

-- ### Legit Tab UI Elements
LegitTab:CreateSection("Player Modifiers")

local WalkSpeedToggle = LegitTab:CreateToggle({
    Name = "WalkSpeed Toggle",
    CurrentValue = false,
    Flag = "WalkSpeedToggle",
    Callback = function(Value)
        task.spawn(function()
            if Value then
                Debris_Variables.WalkSpeedToggle.WalkSpeedConnect = humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
                    if humanoid.WalkSpeed ~= tonumber(Rayfield.Flags["WalkSpeedInput"].CurrentValue) then
                        humanoid.WalkSpeed = tonumber(Rayfield.Flags["WalkSpeedInput"].CurrentValue)
                    end
                end)
                task.spawn(function()
                    while Rayfield.Flags["WalkSpeedToggle"].CurrentValue do
                        task.wait(0.1)
                        if humanoid.WalkSpeed ~= tonumber(Rayfield.Flags["WalkSpeedInput"].CurrentValue) then
                            humanoid.WalkSpeed = tonumber(Rayfield.Flags["WalkSpeedInput"].CurrentValue)
                        end
                    end
                    if Debris_Variables.WalkSpeedToggle.WalkSpeedConnect then
                        Debris_Variables.WalkSpeedToggle.WalkSpeedConnect:Disconnect()
                        Debris_Variables.WalkSpeedToggle.WalkSpeedConnect = nil
                    end
                end)
            else
                if Debris_Variables.WalkSpeedToggle.WalkSpeedConnect then
                    Debris_Variables.WalkSpeedToggle.WalkSpeedConnect:Disconnect()
                    Debris_Variables.WalkSpeedToggle.WalkSpeedConnect = nil
                end
            end
        end)
    end,
})

local function getValidInput(input)
    if input and input ~= "" then
        return input
    else
        return "50"  -- gi√° tr·ªã m·∫∑c ƒë·ªãnh
    end
end

LegitTab:CreateInput({
    Name = "WalkSpeed Input",
    CurrentValue = "16",
    PlaceholderText = "Enter WalkSpeed",
    RemoveTextAfterFocusLost = false,
    Flag = "WalkSpeedInput",
    Callback = function(Value) end,
})

local JumpPowerToggle = LegitTab:CreateToggle({
    Name = "JumpPower Toggle",
    CurrentValue = false,
    Flag = "JumpPowerToggle",
    Callback = function(Value)
        task.spawn(function()
            if Value then
                Debris_Variables.JumpPowerToggle.JumpPowerConnect = humanoid:GetPropertyChangedSignal("JumpPower"):Connect(function()
                    local inputText = getValidInput(Rayfield.Flags["JumpPowerInput"].CurrentValue)
                    local newJumpPower = tonumber(inputText)
                    if humanoid.JumpPower ~= newJumpPower then
                        humanoid.JumpPower = newJumpPower
                    end
                end)
                task.spawn(function()
                    while Rayfield.Flags["JumpPowerToggle"].CurrentValue do
                        task.wait(0.1)
                        local inputText = getValidInput(Rayfield.Flags["JumpPowerInput"].CurrentValue)
                        local newJumpPower = tonumber(inputText)
                        if humanoid.JumpPower ~= newJumpPower then
                            humanoid.JumpPower = newJumpPower
                        end
                    end
                    if Debris_Variables.JumpPowerToggle.JumpPowerConnect then
                        Debris_Variables.JumpPowerToggle.JumpPowerConnect:Disconnect()
                        Debris_Variables.JumpPowerToggle.JumpPowerConnect = nil
                    end
                end)
            else
                if Debris_Variables.JumpPowerToggle.JumpPowerConnect then
                    Debris_Variables.JumpPowerToggle.JumpPowerConnect:Disconnect()
                    Debris_Variables.JumpPowerToggle.JumpPowerConnect = nil
                end
            end
        end)
    end,
})


LegitTab:CreateInput({
    Name = "JumpPower Input",
    CurrentValue = "50", -- gi√° tr·ªã m·∫∑c ƒë·ªãnh
    PlaceholderText = "Enter JumpPower",
    RemoveTextAfterFocusLost = false,
    Flag = "JumpPowerInput",
    Callback = function(Value)
        -- Ki·ªÉm tra n·∫øu Value nil ho·∫∑c r·ªóng, g√°n gi√° tr·ªã m·∫∑c ƒë·ªãnh
        if not Value or Value == "" then
            Rayfield.Flags["JumpPowerInput"].CurrentValue = "50"
        end
    end,
})



LegitTab:CreateSection("Hitbox")

local HitboxToggle = LegitTab:CreateToggle({
    Name = "Hitbox Toggle",
    CurrentValue = false,
    Flag = "HitboxToggle",
    Callback = function(Value)
        task.spawn(function()
            while Value do
                task.wait()
                Debris_Variables.HitboxToggle.FootBall = Function_Storage.GetBall()
                if Debris_Variables.HitboxToggle.FootBall then
                    Debris_Variables.HitboxToggle.HitBox = Debris_Variables.HitboxToggle.FootBall:FindFirstChild("Hitbox")
                    if Debris_Variables.HitboxToggle.HitBox and Debris_Variables.HitboxToggle.HitBox:IsA("Part") then
                        Function_Storage.UpdateHitboxSize(Debris_Variables.HitboxToggle.HitBox, 0.5, tonumber(Rayfield.Flags["HitboxInput"].CurrentValue))
                    end
                end
            end
            task.wait(0.1)
            if not Value and Debris_Variables.HitboxToggle.HitBox then
                Function_Storage.UpdateHitboxSize(Debris_Variables.HitboxToggle.HitBox, 1, 2.5)
            end
        end)
    end,
})

local Button = LegitTab:CreateButton({
   Name = "Infinite Yield",
   Callback = function()
   loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
   end,
})

LegitTab:CreateInput({
    Name = "Hitbox Size",
    CurrentValue = "10",
    PlaceholderText = "Enter size (1-30)",
    RemoveTextAfterFocusLost = false,
    Flag = "HitboxInput",
    Callback = function(Value) end,
})

LegitTab:CreateKeybind({
    Name = "Hitbox Keybind",
    CurrentKeybind = "H",
    HoldToInteract = false,
    Flag = "HitboxKeybind",
    Callback = function(Key)
        task.spawn(function()
            Debris_Variables.HitboxKeybind.State = not Rayfield.Flags["HitboxToggle"].CurrentValue
            HitboxToggle:Set(Debris_Variables.HitboxKeybind.State)
        end)
    end,
})

LegitTab:CreateSection("Misc")

-- Kh·ªüi t·∫°o c√†i ƒë·∫∑t Auto Dribble n·∫øu ch∆∞a c√≥ (ƒë·∫∑t ·ªü ƒë·∫ßu script)
if not getgenv().AutoDribbleSettings then
    getgenv().AutoDribbleSettings = {
        Enabled = false, -- M·∫∑c ƒë·ªãnh t·∫Øt ƒë·ªÉ kh·ªõp v·ªõi toggle
        range = 22       -- Ph·∫°m vi m·∫∑c ƒë·ªãnh
    }
end

local R = game:GetService("ReplicatedStorage")
local P = game:GetService("Players")
local U = game:GetService("RunService")
local L = P.LocalPlayer or P.PlayerAdded:Wait()

LegitTab:CreateToggle({
    Name = "AutoDribble Toggle",
    CurrentValue = false,
    Flag = "AutoDribble",
    Callback = function(Value)
        getgenv().AutoDribbleSettings.Enabled = Value 
        
        if Value then
            local function initCharacter()
                local C = L.Character or L.CharacterAdded:Wait()
                local H = C:WaitForChild("HumanoidRootPart")
                local M = C:WaitForChild("Humanoid")
                return C, H, M
            end
            local C, H, M = initCharacter()

            -- X·ª≠ l√Ω khi nh√¢n v·∫≠t thay ƒë·ªïi
            L.CharacterAdded:Connect(function(newChar)
                C, H, M = initCharacter()
            end)

            -- RemoteEvent v√† Animation
            local B = R.Packages.Knit.Services.BallService.RE.Dribble
            local A = require(R.Assets.Animations)

            -- H√†m t·∫£i animation r√™ b√≥ng
            local function G(s)
                if not A.Dribbles[s] then return nil end
                local I = Instance.new("Animation")
                I.AnimationId = A.Dribbles[s]
                return M and M:LoadAnimation(I)
            end

            local function T(p)
                if p == L then return false end
                local c = p.Character
                if not c then return false end
                local V = c.Values and c.Values.Sliding
                if V and V.Value == true then return true end
                local h = c:FindFirstChildOfClass("Humanoid")
                if h and h.MoveDirection.Magnitude > 0 and h.WalkSpeed == 0 then return true end
                return false
            end

            local function O(p)
                if not L.Team or not p.Team then return false end
                return L.Team ~= p.Team
            end

            local function D(d)
                if not getgenv().AutoDribbleSettings.Enabled or not C.Values.HasBall.Value then return end
                B:FireServer() 
                local s = L.PlayerStats.Style.Value
                local t = G(s)
                if t then
                    t:Play()
                    t:AdjustSpeed(math.clamp(1 + (10 - d) / 10, 1, 2)) -- ƒêi·ªÅu ch·ªânh t·ªëc ƒë·ªô animation
                end
                local F = workspace:FindFirstChild("Football")
                if F then
                    F.AssemblyLinearVelocity = Vector3.new() 
                    F.CFrame = C.HumanoidRootPart.CFrame * CFrame.new(0, -2.5, 0) 
                end
            end

            task.spawn(function()
                while Rayfield.Flags["AutoDribble"].CurrentValue do
                    if not C or not H then return end
                    for _, p in pairs(P:GetPlayers()) do
                        if O(p) and T(p) then
                            local r = p.Character and p.Character:FindFirstChild("HumanoidRootPart")
                            if r then
                                local d = (r.Position - H.Position).Magnitude
                                if d < getgenv().AutoDribbleSettings.range then
                                    D(d) 
                                    break
                                end
                            end
                        end
                    end
                    task.wait(0.1) --
                end
            end)
        end
    end,
})


local vipToggle = LegitTab:CreateToggle({
    Name = "VIP Toggle",
    CurrentValue = false,
    Flag = "vipToggle",
    Callback = function(Value)
        task.spawn(function()
            Debris_Variables.vipToggle.hasVIP = player:FindFirstChild("HasVIP")
            if Debris_Variables.vipToggle.hasVIP then
                Debris_Variables.vipToggle.hasVIP.Value = Value
                if Value then
                    Rayfield:Notify({ Title = "VIP Activated", Content = "You are now a VIP! Enjoy your perks!", Duration = 3 })
                else
                    Rayfield:Notify({ Title = "VIP Deactivated", Content = "VIP status disabled. You lost your perks.", Duration = 3 })
                end
            else
                Rayfield:Notify({ Title = "Error", Content = "Could not find the 'HasVIP' property. Try Again.", Duration = 3 })
                vipToggle:Set(false)
            end
        end)
    end,
})

if not getgenv().Settings then
    getgenv().Settings = {}
end

LegitTab:CreateButton({
    Name = "Infinite Stamina",
    Callback = function()
        if not getgenv().Settings.InfiniteStamina then
            getgenv().Settings.InfiniteStamina = true
            Rayfield:Notify({
                Title = "Infinite Stamina",
                Content = "Enabled",
                Duration = 3
            })
            task.spawn(function()
                while task.wait(0.1) do
                    if getgenv().Settings.InfiniteStamina then
                        pcall(function()
                            local plr = game.Players.LocalPlayer
                            local stats = plr:FindFirstChild("PlayerStats")
                            if stats then
                                local stamina = stats:FindFirstChild("Stamina")
                                if stamina then
                                    stamina:Destroy()
                                    local fakeStamina = Instance.new("NumberValue")
                                    fakeStamina.Name = "Stamina"
                                    fakeStamina.Value = math.huge
                                    fakeStamina.Parent = stats
                                end
                            end
                        end)
                    end
                end
            end)
        else
            Rayfield:Notify({
                Title = "Infinite Stamina",
                Content = "Already Enabled",
                Duration = 3
            })
        end
    end,
})



-- ### Visual Tab UI Elements
VisualTab:CreateSection("Visual Features")

local Debris_Variables = Debris_Variables or {}
Debris_Variables.ESP_Features = Debris_Variables.ESP_Features or {
    espEnabled = false,
    espFeatures = { Style = false, Awakening = false, Flow = false, Stamina = false },
    espObjects = {}
}

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

local function createESP(player)
    if player == LocalPlayer or not player.Character then return end
    local character = player.Character
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return end

    local billboard = Instance.new("BillboardGui")
    billboard.Name = "ESP_" .. player.Name
    billboard.Adornee = humanoidRootPart
    billboard.Size = UDim2.new(0, 100, 0, 50)
    billboard.StudsOffset = Vector3.new(0, 3, 0)
    billboard.AlwaysOnTop = true
    billboard.Parent = game.CoreGui

    local nameLabel = Instance.new("TextLabel")
    nameLabel.Size = UDim2.new(1, 0, 0, 20)
    nameLabel.Position = UDim2.new(0, 0, 0, 0)
    nameLabel.BackgroundTransparency = 1
    nameLabel.Text = player.Name
    nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    nameLabel.TextStrokeTransparency = 0
    nameLabel.Font = Enum.Font.SourceSansBold
    nameLabel.TextSize = 16
    nameLabel.Parent = billboard

    Debris_Variables.ESP_Features.espObjects[player] = billboard
end

local function removeESP(player)
    if Debris_Variables.ESP_Features.espObjects[player] then
        Debris_Variables.ESP_Features.espObjects[player]:Destroy()
        Debris_Variables.ESP_Features.espObjects[player] = nil
    end
end

-- Toggle Enable ESP
VisualTab:CreateToggle({
    Name = "Enable ESP",
    CurrentValue = false,
    Flag = "espToggle",
    Callback = function(Value)
        Debris_Variables.ESP_Features.espEnabled = Value
        if Value then
            for _, player in pairs(Players:GetPlayers()) do
                createESP(player)
            end
            Players.PlayerAdded:Connect(function(player)
                if Debris_Variables.ESP_Features.espEnabled then
                    player.CharacterAdded:Connect(function()
                        createESP(player)
                    end)
                end
            end)
            Players.PlayerRemoving:Connect(function(player)
                removeESP(player)
            end)
            task.spawn(function()
                while Debris_Variables.ESP_Features.espEnabled do
                    for player, billboard in pairs(Debris_Variables.ESP_Features.espObjects) do
                        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                            billboard.Adornee = player.Character.HumanoidRootPart
                        else
                            removeESP(player)
                        end
                    end
                    task.wait(0.1)
                end
            end)
        else
            for player, _ in pairs(Debris_Variables.ESP_Features.espObjects) do
                removeESP(player)
            end
        end
    end,
})

-- ### OP Tab UI Elements
OPTab:CreateSection("Striker")

local function ClosestCharacter(o, w)
    local c, d = nil, math.huge
    if not o or not o:FindFirstChild("HumanoidRootPart") then return nil end
    for _, m in ipairs((w or workspace):GetDescendants()) do
        if m:IsA("Model") and m ~= o and m:FindFirstChild("Humanoid") and m:FindFirstChild("HumanoidRootPart") and m:FindFirstChild("Football") then
            local dist = (o.HumanoidRootPart.Position - m.HumanoidRootPart.Position).Magnitude
            if dist < d then c, d = m, dist end
        end
    end
    return c
end

local function Goto(t, g, a)
    if humanoidrootpart then
        humanoidrootpart.CFrame = t
    end
    if a == "Slide" then
        game:GetService("ReplicatedStorage").Packages.Knit.Services.BallService.RE.Slide:FireServer()
    elseif a == "Kick" then
        game:GetService("ReplicatedStorage").Packages.Knit.Services.BallService.RE.Shoot:FireServer(100, nil, nil, workspace.Goals[g].Position)
        task.wait(0.1)
        local ball = workspace:FindFirstChild("Football") or workspace:WaitForChild("Football", 5)
        if ball then
            local targetPos = (workspace.Goals[g].CFrame * CFrame.new(0, 0, 10)).Position
            repeat
                ball.CFrame = CFrame.new(targetPos)
                task.wait()
            until (ball.Position - targetPos).Magnitude < 0.2
        end
    end
end

OPTab:CreateToggle({
    Name = "Auto Goal",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        getgenv().Settings = getgenv().Settings or {}
        getgenv().Settings.AutoFarmTeleportToggle = Value

        if Value then
            task.spawn(function()
                local function autoGoalLogic()
                    if player.Team.Name == "Visitor" then return end

                    local character = player.Character
                    if not character or not character:FindFirstChild("HumanoidRootPart") then return end
                    humanoidrootpart = character:WaitForChild("HumanoidRootPart")
                    local humanoid = character:FindFirstChildOfClass("Humanoid")
                    if not humanoid then return end
                    local v = character:FindFirstChild("Values") or character:WaitForChild("Values", 5)
                    local h = v and (v:FindFirstChild("HasBall") or v:WaitForChild("HasBall", 5))
                    local g = {["Away"] = "Away", ["Home"] = "Home"}
                    local targetGoal = g[player.Team.Name]

                    if targetGoal then
                        if h and h.Value then
                            Goto(humanoidrootpart.CFrame * CFrame.new(0, 50, 0), targetGoal, "Kick")
                        else
                            local t = ClosestCharacter(character)
                            local fb = t and t:FindFirstChild("Football") or (t and t:WaitForChild("Football", 5))
                            if fb then
                                Goto(fb.CFrame * CFrame.new(0, 3.5, 0), targetGoal, "Slide")
                            end
                        end
                    end
                end

                local function onTeamChanged()
                    if getgenv().Settings.AutoFarmTeleportToggle then
                        autoGoalLogic()
                        task.wait(0.1)
                    end
                end

                player:GetPropertyChangedSignal("Team"):Connect(onTeamChanged)

                while getgenv().Settings.AutoFarmTeleportToggle do
                    autoGoalLogic()
                    task.wait(0.05) -- spam nhanh h∆°n
                end
            end)
        end
    end,
})

OPTab:CreateToggle({
    Name = "Auto Goal Rush",
    CurrentValue = false,
    Flag = "AutoGoalRush",
    Callback = function(Value)
        local goalCFrame = CFrame.new(322.7972412109375, 11.166389465332031, -47.563377380371094)

        getgenv().Settings = getgenv().Settings or {}
        getgenv().Settings.AutoGoalRush = Value

        if Value then
            task.spawn(function()
                local function autoGoalRushLogic()
                    if player.Team.Name == "Visitor" then
                        return
                    end

                    local character = player.Character
                    if not character or not character:FindFirstChild("HumanoidRootPart") then return end
                    local humanoidrootpart = character:WaitForChild("HumanoidRootPart")
                    local humanoid = character:FindFirstChildOfClass("Humanoid")
                    if not humanoid then return end

                    local v = character:FindFirstChild("Values") or character:WaitForChild("Values", 5)
                    local h = v and (v:FindFirstChild("HasBall") or v:WaitForChild("HasBall", 5))

                    if h and h.Value then
                        -- ƒêang gi·ªØ b√≥ng, s√∫t v√† teleport b√≥ng t·ªõi v·ªã tr√≠ c·ªë ƒë·ªãnh
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.BallService.RE.Shoot:FireServer(100, nil, nil, goalCFrame.Position)
                        task.wait(0.3)
                        local ball = workspace:FindFirstChild("Football") or workspace:WaitForChild("Football", 5)
                        if ball then
                            local targetPos = (goalCFrame * CFrame.new(0, 0, 10)).Position
                            repeat
                                ball.CFrame = CFrame.new(targetPos)
                                task.wait(0.1)
                            until (ball.Position - targetPos).Magnitude < 0.2
                        end
                    else
                        -- Kh√¥ng gi·ªØ b√≥ng, di chuy·ªÉn t·ªõi b√≥ng
                        local b = workspace:FindFirstChild("Football")
                        if b then
                            humanoidrootpart.CFrame = b.CFrame * CFrame.new(0, 3.5, 0)
                        else
                            local t = ClosestCharacter(character)
                            local fb = t and t:FindFirstChild("Football") or (t and t:WaitForChild("Football", 5))
                            if fb then
                                humanoidrootpart.CFrame = fb.CFrame
                                game:GetService("ReplicatedStorage").Packages.Knit.Services.BallService.RE.Slide:FireServer()
                            end
                        end
                    end
                end

                while getgenv().Settings.AutoGoalRush do
                    autoGoalRushLogic()
                    task.wait(0.1)
                end
            end)
        end
    end,
})



-- Keybind: use the saved power value from getgenv()
local Keybind = OPTab:CreateKeybind({ 
   Name = "Shoot Ball",
   CurrentKeybind = "Z",
   HoldToInteract = false,
   Flag = "KeybindShoot", 
   Callback = function()
      local power = getgenv().PowerShootValue or 100
      game:GetService("ReplicatedStorage").Packages.Knit.Services.BallService.RE.Shoot:FireServer(power)
   end,
})


local TrollTab = Window:CreateTab("üòàTroll") -- Title, Image

local Section = TrollTab:CreateSection("Fling")

local Button = TrollTab:CreateButton({
   Name = "Fling People",
   Callback = function()
	loadstring(game:HttpGet("https://pastefy.app/fFP2IgWN/raw"))()
   end,
})

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local FlingAllConnection


local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local FlingAllConnection

local FlingAllToggle = TrollTab:CreateToggle({
	Name = "Fling All(Reo/Kunigami required)",
	CurrentValue = false,
	Flag = "FlingAll",
	Callback = function(Value)
		local character = Players.LocalPlayer.Character
		if character and character:FindFirstChild("HumanoidRootPart") then
			character.HumanoidRootPart.Anchored = Value
		end

		if Value then
			FlingAllConnection = task.spawn(function()
				while true do
					for _, player in pairs(Players:GetPlayers()) do
						if player ~= Players.LocalPlayer then
							local args = {
								[1] = "BodyBlock",
								[2] = workspace:FindFirstChild(player.Name)
							}

							if args[2] then
								ReplicatedStorage:WaitForChild("Packages")
									:WaitForChild("Knit")
									:WaitForChild("Services")
									:WaitForChild("AbilityService")
									:WaitForChild("RE")
									:WaitForChild("Ability")
									:FireServer(unpack(args))
							end
						end
					end
					task.wait(0.25)
				end
			end)
		else
			if FlingAllConnection then
				pcall(function()
					task.cancel(FlingAllConnection)
				end)
			end

			-- Ensure unanchor again in case character reloaded during loop
			local char = Players.LocalPlayer.Character
			if char and char:FindFirstChild("HumanoidRootPart") then
				char.HumanoidRootPart.Anchored = false
			end
		end
	end,
})

local Section = TrollTab:CreateSection("Movesets")

local Button = TrollTab:CreateButton({
   Name = "Kaiser Dribble(no subj)",
   Callback = function()
    local Players = game:GetService("Players")
	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	local UserInputService = game:GetService("UserInputService")

	local player = Players.LocalPlayer
	local character = player.Character or player.CharacterAdded:Wait()
	local camera = workspace.CurrentCamera

	-- UI setup
	local gui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
	gui.Name = "KaiserDribbleUI"
	gui.ResetOnSpawn = false

	local frame = Instance.new("Frame", gui)
	frame.Size = UDim2.new(0, 140, 0, 60)
	frame.Position = UDim2.new(1, -150, 1, -70)
	frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	frame.BackgroundTransparency = 0.2
	frame.Active = true
	frame.Draggable = true

	local button = Instance.new("TextButton", frame)
	button.Size = UDim2.new(1, 0, 1, 0)
	button.Position = UDim2.new(0, 0, 0, 0)
	button.Text = "Dribble"
	button.BackgroundColor3 = Color3.fromRGB(60, 120, 255)
	button.TextColor3 = Color3.new(1, 1, 1)
	button.TextScaled = true
	button.AutoButtonColor = true

	-- Show only on mobile
	button.Visible = UserInputService.TouchEnabled

	-- Find nearest visible player in front
	local function getClosestVisiblePlayer()
		local minDistance = math.huge
		local closest = nil
		local root = character:FindFirstChild("HumanoidRootPart")

		for _, other in ipairs(Players:GetPlayers()) do
			if other ~= player and workspace:FindFirstChild(other.Name) then
				local otherChar = workspace[other.Name]
				local otherRoot = otherChar:FindFirstChild("HumanoidRootPart")
				if otherRoot then
					local dirToPlayer = (otherRoot.Position - root.Position).Unit
					local facing = root.CFrame.LookVector
					if facing:Dot(dirToPlayer) > 0.5 then
						local screenPos, onScreen = camera:WorldToViewportPoint(otherRoot.Position)
						if onScreen then
							local distance = (otherRoot.Position - root.Position).Magnitude
							if distance < minDistance then
								minDistance = distance
								closest = other
							end
						end
					end
				end
			end
		end
		return closest
	end

	-- Trigger skill
	local function triggerDribble()
		local target = getClosestVisiblePlayer()
		if target then
			button.Text = "Dribbling..."
			button.AutoButtonColor = false
			button.BackgroundTransparency = 0.5
			button.TextTransparency = 0.5

			task.wait(0.2) -- cooldown/delay

			local args = {
				[1] = "KaiserDribble",
				[2] = {
					["State"] = "Off-Ball",
					["Action"] = "Dribble",
					["Object"] = workspace:WaitForChild(target.Name)
				}
			}
			ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit")
				:WaitForChild("Services"):WaitForChild("AbilityService")
				:WaitForChild("RE"):WaitForChild("Ability"):FireServer(unpack(args))

			-- Reset button
			button.Text = "Dribble"
			button.AutoButtonColor = true
			button.BackgroundTransparency = 0
			button.TextTransparency = 0
		end
	end

	-- PC keybind
	UserInputService.InputBegan:Connect(function(input, processed)
		if processed then return end
		if input.KeyCode == Enum.KeyCode.V then
			triggerDribble()
		end
	end)

	-- Mobile button
	button.MouseButton1Click:Connect(triggerDribble)
   end,
})


-- Input: save power value to getgenv() on change
local Input = OPTab:CreateInput({ 
   Name = "Power", 
   CurrentValue = 100, 
   PlaceholderText = "Enter power",
   RemoveTextAfterFocusLost = false,
   Flag = "PowerShoot", 
   Callback = function(Text)
      local power = tonumber(Text)
      if power then
         getgenv().PowerShootValue = power
      else
         warn("Invalid power input, keeping previous value or defaulting to 100")
         getgenv().PowerShootValue = 100
      end
   end,
})


-- ### Style Tab UI Elements
StyleTab:CreateSection("Style")
local chosenStyle = "Isagi" -- Gi√° tr·ªã kh·ªüi t·∫°o l√† string
local chosenFlow = "Puzzle"

StyleTab:CreateDropdown({
    Name = "Style",
    Options = {"Isagi", "Chigiri", "Bachira", "Otoya", "Hiori", "Gagamaru", "King", "Nagi", "Reo", "Karasu", "Shidou", "Kunigami", "Sae", "Aiku", "Rin", "Yukimiya", "Don Lorenzo", "Kaiser", "NEL Isagi"},
    CurrentOption = chosenStyle, 
    MultipleOptions = false,
    Flag = "StyleLockDropdown",
    Callback = function(Options) 
        chosenStyle = Options[1] 
	end,
})

local Button = StyleTab:CreateButton({
    Name = "Use Style",
    Callback = function()
        game:GetService("Players").LocalPlayer.PlayerStats.Style.Value = chosenStyle
    end,
})

local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local StyleTab = StyleTab

local abilityCooldowns = ReplicatedStorage:FindFirstChild("AbilityCooldowns")

local originalAttributes = {}

local function saveOriginalAttributes()
    if abilityCooldowns then
        for attrName, attrValue in pairs(abilityCooldowns:GetAttributes()) do
            originalAttributes[attrName] = attrValue
        end
    end
end

local function restoreOriginalAttributes()
    if abilityCooldowns then
        for attrName, originalValue in pairs(originalAttributes) do
            abilityCooldowns:SetAttribute(attrName, originalValue)
        end
    end
end

local function setAttributesToZero()
    if abilityCooldowns then
        for attrName, _ in pairs(abilityCooldowns:GetAttributes()) do
            abilityCooldowns:SetAttribute(attrName, 0)
        end
    end
end

local heartbeatConnection = nil

local Toggle = StyleTab:CreateToggle({
    Name = "No Cooldown",
    CurrentValue = false,
    Flag = "NoCooldownToggle",
    Callback = function(Value)
        if Value then 
            if next(originalAttributes) == nil then
                saveOriginalAttributes()
            end
            if not heartbeatConnection then
                heartbeatConnection = RunService.Heartbeat:Connect(setAttributesToZero)
            end
        else --  
            if heartbeatConnection then
                heartbeatConnection:Disconnect()
                heartbeatConnection = nil
            end
            restoreOriginalAttributes()
        end
    end,
})

StyleTab:CreateSection("Flow")

StyleTab:CreateDropdown({
    Name = "Flow Lock",
    Options = {"Ice", "Lightning", "Puzzle", "Monster", "Gale Burst", "Genius", "King's Instinct", "Trap", "Crow", "Demon Wings", "Chameleon", "Wild Card", "Snake", "Prodigy", "Awakened Genius", "Dribbler"},
    CurrentOption = {},
    MultipleOptions = false,
    Flag = "FlowLockDropdown",
    Callback = function(Options) 
		chosenFlow = Options[1]
	end,
})

local Button = StyleTab:CreateButton({
   Name = "Use Flow",
   Callback = function()
   game:GetService("Players").LocalPlayer.PlayerStats.Flow.Value=chosenFlow
   end,
})



Rayfield:LoadConfiguration()
